# [gcode_macro G28]
# Only home if needed.
#rename_existing: G28.1
#gcode:
#    {% if printer.toolhead.homed_axes != "xyz" %}
#        G28.1
#    {% else %}
#        G28.1 X Y
#        #G28.1 Z
#    {% endif %}
# End smart home

[gcode_macro PRINT_START]
gcode:
    # Did you mean START_PRINT?? This one is for OrcaSlicer profile testing
    M104 S120 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
    M140 S[bed_temperature_initial_layer_single] ; set final bed temp
    G4 S10 ; allow partial nozzle warmup
    G28 ; home all axis
    ;G29 ; run abl mesh
    ;M420 S1 ; load mesh
    G1 Z10 F240
    G1 X2 Y10 F3000
    M104 S[nozzle_temperature_initial_layer] ; set final nozzle temp
    M190 S[bed_temperature_initial_layer_single] ; wait for bed temp to stabilize
    M109 S[nozzle_temperature_initial_layer] ; wait for nozzle temp to stabilize
    G1 Z0.28 F240
    G92 E0
    G1 Y140 E10 F1500 ; prime the nozzle
    G1 X3 F5000
    G92 E0
    G1 Y20 E10 F1200 ; prime the nozzle
    G92 E0
#end gcode

[gcode_macro START_PRINT]
gcode:
    #Did you mean PRINT_START?? This is default from Klipper macro examples
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    # SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near safe_home
    G1 X233 Y206 Z5 F3000
    # Move the nozzle very close to the bed 
    # G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}


[gcode_macro END_PRINT]
gcode:
    # did you mean PRINT_END?? This one is for OrcaSlicer testing
    M104 S0  ;extruder heater off
    M140 S0  ;heated bed heater off (if you have it)
    G91      ;relative positioning
    G1 Z+15 F600 ;move Z up a bit
    G90              ;absolute positioning
    G28 X Y
    G1 Z160 F600 ;present print
    ;M355 S0    ;turn off the case light
    M84 X Y        ;steppers off
# end gcode

[gcode_macro PRINT_END]
gcode:
    # did you mean END_PRINT?? This is default from Klipper macro examples
    G1 E-10 #retract to bottom of heatbreak
    M300 #beep
    G1 E-30 #retract to top of heatbreak
    G91 #; Relative positioning
    G1 Z5 #; Move Z up 5mm
    M104 S0 #; Turn off extruder
    M140 S0 #; Turn off Heatbed
    M107 #; Turn off Part Fan
    G28 X Y #; Home X and Y
    G90 #; 
    G1 Y206 #; Move nozzle forward to safe_home.
    M84 X Y #; Disable XY steppers
#end Gcode

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel} # / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
# End Gcode
 
[gcode_macro turn_temp_leds_on]
gcode:
	# Update all LEDs value temps)
#	SET_LED LED=chamber_light white={printer["temperature_sensor chamber_temp"].temperature |float / 1024 * 10} sync=0
#	SET_LED LED=lcd_light green={printer.heater_bed.temperature |float / 1024 * 10} sync=0
#    SET_LED LED=PIS_led red={printer.extruder.temperature |float / 1024 * 10} sync=0
    {% set extruder_temp_max = 280 %}
    {% set bed_temp_max = 120 %}
    {% set chamber_temp_max = 60 %}
    set_led LED=PIS_READY_led RED={printer.extruder.temperature|int / extruder_temp_max|int|round(0)|int} sync=0
	set_led LED=lcd_light GREEN={printer.heater_bed.temperature|int / bed_temp_max|int|round(0)|int} sync=0
    set_led LED=chamber_light WHITE={printer["temperature_sensor heater_chamber"].temperature|int / chamber_temp_max|int|round(0)|int} sync=0 
# End Gcode

[gcode_macro turn_lights_off]
gcode:
	# Update all LEDs value 0)
	SET_LED LED=chamber_light white=0.000 sync=0
	SET_LED LED=lcd_light green=0.000 sync=0
    SET_LED LED=PIS_READY_led red=0.00 sync=0
# end lights off

[gcode_macro turn_lights_on]
gcode:
	# Update all LEDs value 0.75)
	SET_LED LED=chamber_light white=0.75 sync=0
	SET_LED LED=lcd_light green=0.75 sync=0
    SET_LED LED=PIS_READY_led red=0.75 sync=0

    
# end lights on

[gcode_macro END_SONG]
gcode:
  M300 P250 S349
  M300 P50 S0
  M300 P250 S466
  M300 P50 S0
  M300 P250 S523
  M300 P50 S0
  M300 P250 S587
  M300 P50 S0
  M300 P250 S659
  M300 P50 S0
  M300 P250 S523
  M300 P50 S0
  M300 P250 S392
  M300 P50 S0
  M300 P250 S523
  M300 P50 S0
  M300 P263 S698
  M300 P53 S0
  M300 P278 S587
  M300 P56 S0
  M300 P294 S466
  M300 P59 S0
  M300 P333 S392
  M300 P67 S0
  M300 P1731 S440
# End Gcode
  
[gcode_macro G29]
gcode: 
  G28
  M190 S60
  BED_MESH_CALIBRATE
  BED_MESH_PROFILE SAVE=60
  # G1 X0 Y0 Z5 F4000
  G28
  M140 S0
# End Gcode

[gcode_macro G29.100]
gcode: 
  G28
  M190 S100
  BED_MESH_CALIBRATE
  BED_MESH_PROFILE SAVE=100
  # G1 X0 Y0 Z5 F4000
  G28
  M140 S0
# End Gcode

#[gcode_macro BED_TILT_CALIBRATE]
#description: G-Code macro home, move to center of bed, and run BED_TILT_CALIBRATE
#rename_existing: _BED_TILT_CALIBRATE
#gcode:
#    G28
#    _BED_TILT_CALIBRATE
#    G28
# End Gcode

#[gcode_macro BedScrewsCalculate]
#gcode:
#    G28
#    G1 Y100 X100 F7800
#    SCREWS_TILT_CALCULATE
#    G28
#description: G-Code macro home, move to center of bed, and run SCREWS_TILT_CALCULATE
# End Gcode

[gcode_macro probe_corners]
description: G-Code macro to Validate BED_PROBES
gcode:
    G28
    G1 X208 Y204 F7800
    PROBE_ACCURACY
    G1 z10 F600
    G1 Y-5 F7800
    PROBE_ACCURACY
    G1 z10 F600
    G1 X22 F7800
    PROBE_ACCURACY
    G1 z10 F600
    G1 Y204 F7800
    PROBE_ACCURACY
    G28
# End Gcode

[gcode_macro multi_probe_corners]
description: G-Code macro to Validate BED_PROBES
gcode:
    G28
    G1 X208 Y204 F7800
    PROBE_ACCURACY samples=50
    G1 Z5 F600
    G1 X22 F7800
    PROBE_ACCURACY samples=50
    G1 Z5 F600
    G1 X208 F7800
    G1 Y-5 F7800
    PROBE_ACCURACY samples=50
    G28
# End Gcode

[gcode_macro single_probe_BED]
description: G-Code macro to Validate BED_PROBES
gcode:
    G28
    G1 Y189 X189 F7800
    PROBE
    G1 z5 F600
    G1 Y10 F7800
    PROBE
    G1 z5 F600
    G1 X10 F7800
    PROBE
    G1 z5 F600
    G1 Y189 F7800
    PROBE
    G28
# End Gcode

[gcode_macro multi_probe_BED]
description: G-Code macro to Validate BED_PROBES
gcode:
    G28
    G1 Y189 X189 F7800
    PROBE_ACCURACY
    G1 z5 F600
    G1 Y10 F7800
    PROBE_ACCURACY
    G1 z5 F600
    G1 X10 F7800
    PROBE_ACCURACY
    G1 z5 F600
    G1 Y189 F7800
    PROBE_ACCURACY
    G28
# End Gcode

[gcode_macro multiprobe_ALL]
description: G-Code macro to Validate BED_PROBES
gcode:
    G28
    G1 X100 Y100 F7800
    G1 X22 Y206 F7800
    PROBE_ACCURACY
    PROBE_ACCURACY
    G1 Z10 F600
    G1 X210 F7800
    PROBE_ACCURACY
    PROBE_ACCURACY
    G1 Z10 F600
    G1 Y-5 F7800
    PROBE_ACCURACY
    PROBE_ACCURACY
    G1 Z10 F600
    G1 X22 F7800
    PROBE_ACCURACY
    PROBE_ACCURACY
    G1 Z10 F600
    G28
# End Gcode

[gcode_macro multiprobe_1]
description: G-Code macro to Validate BED_PROBE 1
gcode:
    G28
    G1 Y100 X100 F7800
    G1 X22 Y206 F7800
    PROBE_ACCURACY
    G1 Z10 F600
    G28
# End Gcode

[gcode_macro multiprobe_2]
description: G-Code macro to Validate BED_PROBE 2
gcode:
    G28
    G1 Y100 X100 F7800
    G1 X210 Y206 F7800
    PROBE_ACCURACY
    G1 Z10 F600
    G28
# End Gcode

[gcode_macro multiprobe_3]
description: G-Code macro to Validate BED_PROBE 3
gcode:
    G28
    G1 Y100 X100 F7800
    G1 X210 Y-5 F7800
    PROBE_ACCURACY
    G1 Z10 F600
    G28
# End Gcode

[gcode_macro multiprobe_4]
description: G-Code macro to Validate BED_PROBE 4
gcode:
    G28
    G1 Y100 X100 F7800
    G1 X22 Y-5 F7800
    PROBE_ACCURACY
    G1 Z10 F600
    G28
# End Gcode

[gcode_macro update_x_phase]
description: G-Code macro to update stepper phase in startup, run if you get stepper phase errors
gcode:
    ENDSTOP_PHASE_CALIBRATE stepper=stepper_x
# End Gcode

[gcode_macro update_y_phase]
gcode:
    ENDSTOP_PHASE_CALIBRATE stepper=stepper_y
# End Gcode

[gcode_macro update_z_phase]
gcode:
    ENDSTOP_PHASE_CALIBRATE stepper=stepper_z
# End Gcode


#[gcode_macro M300]
#gcode:
#    {% set S = params.S|default(800)|float %}
#    {% set P = params.P|default(100)|int %}
#    set_led LED=buzz VALUE=0.5 CYCLE_TIME={ 1.0 / S | float }
#    G4 P{P}
#    set_led LED=buzz VALUE=0

# This macro (M300) uses internal integrated beeper
# Just use it in your G-code for making sounds. Example: M300 S1000 P500
#[gcode_macro M300]
#gcode:
#    {% set S = params.S|default(900)|float %}
#    {% set P = params.P|default(100)|int %}
#    set_led LED=buzz VALUE=0.95 CYCLE_TIME={ 1.0 / S | float }
#    G4 P{P}
#    set_led LED=buzz VALUE=0
# End Gcode

#[delayed_gcode DISABLEFILAMENTSENSOR]
#initial_duration: 1
#gcode:
#    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
# End gcode

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=Case_Light VALUE=0
#    SET_PIN PIN=LCD_Light VALUE=0
    SET_PIN PIN=_BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    SET_PIN PIN=Case_Light VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#    SET_PIN PIN=LCD_Light VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0
#    SET_PIN PIN=Case_Light VALUE=1
#    SET_PIN PIN=LCD_Light VALUE=1
# End Gcode

[gcode_macro M300.1] # Case Light Control (researh making value as dimmer and cycle_time as flasher for camera and tunes)
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
#    SET_PIN PIN=Case_Light VALUE=0
    # see If it can get current state
    SET_LED LED=case_cight white=0.10 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_LED LED=case_light white=1
    # see If it can resume previous state
# End Gcode

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% elif config["smart_effector"] %}
        # smart_effector probe section found
        {% set probe = config["smart_effector"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}
# End gcode    
